% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/daemons.R
\name{serialization}
\alias{serialization}
\title{Custom Serialization Functions}
\usage{
serialization(class, sfunc, ufunc, vec = FALSE, .compute = "default")
}
\arguments{
\item{class}{the class of reference object (as a character string) that these
functions are applied to, e.g. 'ArrowTabular' or 'torch_tensor', or else
NULL to cancel registered functions.}

\item{sfunc}{a function that accepts a reference object inheriting from
\sQuote{class} (or a list of such objects) and returns a raw vector.}

\item{ufunc}{a function that accepts a raw vector and returns a reference
object (or list of such objects).}

\item{vec}{[default FALSE] whether or not the serialization functions are
vectorized and accept and return a list of reference objects, e.g.
\code{torch::torch_serialize} and \code{torch::torch_load}, or if FALSE
return reference objects individually e.g. \code{arrow::write_to_raw} and
\code{arrow::read_ipc_stream}.}

\item{.compute}{[default 'default'] character value for the compute profile
to use (each compute profile has its own independent set of daemons).}
}
\value{
Invisibly, a list comprising the currently-registered serialization
    configuration for the specified compute profile (an empty list if not
    registered).
}
\description{
Registers custom serialization and unserialization functions for sending and
    receiving reference objects. Settings apply to an individual compute
    profile, and daemons must have been set beforehand.
}
\details{
Registering new functions replaces any existing registered
    functions.
}
\examples{
daemons(url = local_url())

reg <- serialization("test_cls", function(x) serialize(x, NULL), unserialize)
reg

reg <- serialization(NULL)
reg

daemons(0)

}
