% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map.R
\name{mirai_map2}
\alias{mirai_map2}
\title{mirai Map2}
\usage{
mirai_map2(
  .x,
  .y,
  .f,
  ...,
  .args = list(),
  .promise = NULL,
  .compute = "default"
)
}
\arguments{
\item{.x}{a list or atomic vector.}

\item{.y}{a list or atomic vector the same length as \sQuote{.x} (or length
one in which case it will be recycled).}

\item{.f}{a function to be applied to each element of \code{.x} and
\code{.y}.}

\item{...}{(optional) named arguments (name = value pairs) specifying objects
referenced, but not defined, in \code{.f}, or an environment containing
such objects.}

\item{.args}{(optional) further constant arguments to \code{.f}, provided as
a list.}

\item{.promise}{(optional) if supplied, registers a promise against each
mirai. Either a function, supplied to the \sQuote{onFulfilled} argument
of \code{promises::then()} or a list of 2 functions, supplied
respectively to \sQuote{onFulfilled} and \sQuote{onRejected} for
\code{promises::then()}. Using this argument requires the
\CRANpkg{promises} package.}

\item{.compute}{[default 'default'] character value for the compute profile
to use (each compute profile has its own independent set of daemons).}
}
\value{
A \sQuote{mirai_map} (list of \sQuote{mirai} objects).
}
\description{
Asynchronous parallel / distributed map of a function over a \strong{pair} of
    lists or vectors using mirai, with optional promises integration.
}
\details{
Sends each application of function \code{.f} on an element of
    \code{.x} and \code{.y} for computation in a separate \code{\link{mirai}}
    call.

    This simple and transparent behaviour is designed to make full use of
    \pkg{mirai} scheduling to minimise overall execution time.

    Facilitates recovery from partial failure by returning all
    \sQuote{miraiError} / \sQuote{errorValue} as the case may be, thus
    allowing only the failures to be re-run.

    Note: requires daemons to have previously been set. If not, then one
    local daemon is set before the function propceeds.
}
\section{Results}{


    \code{x[]} collects the results of a \sQuote{mirai_map} \code{x} and
    returns a list. This will wait for all asynchronous operations to
    complete if still in progress, blocking but user-interruptible.

    \code{x[.flat]} collects and flattens map results to a vector, checking
    that they are of the same type to avoid coercion. Note: errors if an
    \sQuote{errorValue} has been returned or results are of differing type.

    \code{x[.progress]} collects map results whilst showing a text progress
    indicator.

    \code{x[.stop]} collects map results applying early stopping, which stops
    at the first failure and cancels remaining operations. Note: operations
    already in progress continue to completion, although their results are
    not collected.

    The options above may be combined in a vector, for example: \cr
    \code{x[c(.stop, .progress)]} applies early stopping together with a
    progress indicator.
}

\examples{
if (interactive()) {
# Only run examples in interactive R sessions

daemons(4, dispatcher = FALSE)

mirai_map2(1:3, c(1, 10, 20), rnorm, .args = list(sd = 2))[]

mirai_map2(1:3, 50, rnorm, .args = list(sd = 2))[.flat]

daemons(0)

}

}
\seealso{
\code{\link{mirai_map}}
}
